Collections
===========
- Streams (Refer to Person class here: \\nas\distribution\ref\java\tutorial\collections\streams\examples\Person.java)
1. filter
    - predicates
        - Write a program to filter the Person, who are male and age greater than 21
2. map
    - Write a program to print minimal person with name and email address from the Person class using java.util.Stream<T>#map API
3. findFirst/last/any
    - Write a program to filter the Person, who are male and
        - find the first person from the filtered persons
        - find the last person from the filtered persons
        - find random person from the filtered persons
4. Sum/Max/Min
    - Consider a following code snippet:
        List<Integer> randomNumbers = Array.asList({1, 6, 10, 25, 78})
    - Find the sum of all the numbers in the list using java.util.Stream API
    - Find the maximum of all the numbers in the list using java.util.Stream API
    - Find the minimum of all the numbers in the list using java.util.Stream API
5. Collectors
    - Write a program to collect the minimal person with name and email address from the Person class using java.util.Stream<T>#map API as List
6. Reducer methods(ToInt, ToLong)
    - Write a program to find the average age of all the Person in the person List
7. GroupBy, duplicate removal
   - Consider a following code snippet:
        List<Integer> randomNumbers = Array.asList({1, 6, 10, 1, 25, 78, 10, 25})
   - Get the non-duplicate values from the above list using java.util.Stream API
8. forEach
    - Print all the persons in the roster using java.util.Stream<T>#forEach 
9. lambda
    - sort the roster list based on the person's age in descending order using comparator
10. Iterator
    - Iterate the roster list in Persons class and and print the person without using forLoop/Stream  
11. Sorting
    - sort the roster list based on the person's age in descending order using java.util.Stream
12. Addition/Update/Deletion of element to and from collections (addAll(), removeAll, add(), remove(), size())
    - Consider the following code snippet:
        List<Person> newRoster = new ArrayList<>();
        newRoster.add(
            new Person(
            "John",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "john@example.com"));
        newRoster.add(
            new Person(
            "Jade",
            IsoChronology.INSTANCE.date(1990, 7, 15),
            Person.Sex.FEMALE, "jade@example.com"));
        newRoster.add(
            new Person(
            "Donald",
            IsoChronology.INSTANCE.date(1991, 8, 13),
            Person.Sex.MALE, "donald@example.com"));
        newRoster.add(
            new Person(
            "Bob",
            IsoChronology.INSTANCE.date(2000, 9, 12),
            Person.Sex.MALE, "bob@example.com"));
    - Create the roster from the Person class and add each person in the newRoster to the existing list and print the new roster List.
    - Print the number of persons in roster List after the above addition.
    - Remove the all the person in the roster list
13. Contains
    - Consider the following Person:
        new Person(
            "Bob",
            IsoChronology.INSTANCE.date(2000, 9, 12),
            Person.Sex.MALE, "bob@example.com"));
   - Check if the above person is in the roster list obtained from Person class.
14. retain() vs remove()
    - Consider the following code snippet:
        List<Person> newRoster = new ArrayList<>();
        newRoster.add(
            new Person(
            "John",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "john@example.com"));
        newRoster.add(
            new Person(
            "Jade",
            IsoChronology.INSTANCE.date(1990, 7, 15),
            Person.Sex.FEMALE, "jade@example.com"));
        newRoster.add(
            new Person(
            "Donald",
            IsoChronology.INSTANCE.date(1991, 8, 13),
            Person.Sex.MALE, "donald@example.com"));
        newRoster.add(
            new Person(
            "Bob",
            IsoChronology.INSTANCE.date(2000, 9, 12),
            Person.Sex.MALE, "bob@example.com"));
   - Remove the only person who are in the newRoster from the roster list.
   - Remove the following person from the roster List:
        new Person(
            "Bob",
            IsoChronology.INSTANCE.date(2000, 9, 12),
            Person.Sex.MALE, "bob@example.com"));

IO/NIO
======
1. Reading a file using InputStream
2. Reading a file using Reader
3. Read a any text file using BufferedReader and print the content of the file
4. Write some String content using OutputStream
5. Write some String content using Writer
6. Read a file using java.io.File
7. Read a file using java.nio.Files using Paths
8. Reading a CSV file using java.nio.Files API as List string with each row in CSV as a String
9. Given a path, check if path is file or directory
10. InputStream to String and vice versa
11. Object to inputStream and vice versa    
12. Number of files in a directory and number of directories in a directory
13. Get the permission allowed for a file
14. Get the file names of all file with specific extension in a directory
15. Create two paths and test whether they represent same path

Properties
==========
1. Get and print a configurable property based on following priority:
  - args passed for java cmd
  - if not avaialble as cmd args, try to get from System env variables
  - if not available from Sys Env, try to get from a customized .properties file (D:\temp\customize.properties)
  - if not available in customized props files, get from a default .properties file (\\nas\Distribution\training\temp\default.properties)
  - if not available in default props, load from a harcoded default constant
Try to use Properties.setParent() heirarchy mechanism to set out the priorities
2. Load and print localized greetings text based on a given Locale (in_en and in_ta)


DateTime
========
1. Get current time using possible APIs
2. Formatting current date to following formats: 2001-07-04T12:08:56.235-0700 and 2001.07.04 at 12:08:56 PDT
3. Print the components of the current date
4. For a given year, print the length of each month within that year.
5. For a given month of the current year, lists all of the Mondays in that month with date in mm-dd-yyyy format.
6. ISO standard - Format and print current date into ISO date format
7. Date difference - Find the difference between two dates.
8. Epoch 
    - Print the Epoch time
9. TimeStamp 
    - Create and print the time stamp for current date.
10. Timer 
    - Print the time taken for the current method execution using Timer API 
11. TimerTask 
    - Print a message every 10 seconds using TimerTask API with time, like "6:11 AM Monday, 10 September 2018: Hi I am auto runner"
12. Print the current time in milliseconds and nanoseconds.

java.util
====
1. Comparable vs Comparator 
    - Compare Person objects using Comparable and comparator
2. Convert a collection to array and vice versa.
3. Base64
    - Encoding and decoding a String. Encode a password string and decode it using Base64.
4. UUID
    - Generate and print a unique id with alpha-numerical characters
5. Random
    - Generate and print a random number every time
6. Implement a CSV parser using StreamTokenizer API
    - Read a CSV file
    - Parse the CSV file using StreamTokenizer API
    - Set the values in the Person object using lambda
    - Create a list out of the each CSV records
    - Use lambda to prepare the Persons list
7. Scanner
    - Get input from the console using Scanner API
8. Objects
    - Check if a object is non-null
9. Optional
    - demonstrate how optional avoids null pointer exception

Math
====
1. Rounding off
    - Write a Java program to round a BigDecimal number to specified decimals.
    - Print the following values of a particular BigDecimal number:
        - absolute value
        - ceiling
        - floor
        - rint
        - max 
        - min
Text
====
1. Formatting text, date and String
    - Format the number, date and String using java.text.MessageFormat API using different locale.

Annotations (Try only if everything else is done and you time to explore)
==========================
1. Use annotation to set a unique id to the Employee's id object by default.
